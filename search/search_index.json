{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PDIC # PDIC: (IDL) Transpiler Source-to-source compiler C/C++ to YAML Portable Data Interface Description Project related to PDI From C/C++ to Yaml Description Simple binary Python library static binary Python 3 ./pdic file.c import pdic; result:str = pdic.files_to_pdi() Instalation # Binary cmake -S . -DBINARY:BOOL = ON -B build && cmake --build build -- -j ` nproc ` Google Test cmake -S . -DTEST:BOOL = ON -B build && cmake --build build -- -j ` nproc ` cd build && ctest Python python setup.py build -G \"Unix Makefiles\" python3 setup.py bdist_wheel -G \"Unix Makefiles\" -j ` nproc ` python setup.py build_ext -G \"Unix Makefiles\" --inplace -j ` nproc ` pytest Usage # #pragma pdi on typedef struct Var8 { #pragma pdi type : int64 int my_int ; char char_tab [ 20 ]; char my_char ; } var ; #pragma pdi size:[42] int ** array_of_pointer_of_array [ 21 ]; var my_var ; #pragma pdi off Will be see and describe as follow structs: Var8: type: record name: Var8 alias: [var] fieldsize: 3 buffersize: 28 packed: false members: char_tab: { type: array, subtype: char, size: 20 } my_char: offset: 24 type: char my_int: type: int64 data: array_of_pointer_of_array: { type: array, subtype: { type: pointer, subtype: { type: array, subtype: int, size: 42 } }, size: 21 } my_var: type: record name: Var8 alias: [var] fieldsize: 3 buffersize: 28 packed: false members: char_tab: { type: array, subtype: char, size: 20 } my_char: offset: 24 type: char my_int: type: int64 Python Usage import os import pathlib import yaml import pdic here = pathlib . Path ( __file__ ) . parent . resolve () # pip show -f pdic if __name__ == \"__main__\" : pdi_yml_description : str = pdic . files_to_pdi ([ os . path . join ( here , \"level_1.c\" ), os . path . join ( here , \"level_2.c\" )]) print ( pdi_yml_description ) print ( yaml . dump ( yaml . load ( pdi_yml_description ))) Index # Abstract Usage Binary Python Developpement Code Documentation Test Deploy Links Autre Documentation Biblio Code example Extra Clang LLVM Mind Map Graph UML Contact / Credits Credits Barre Kevin neudinger (Software Scientist) CEA pdi team","title":"PDIC [![Open Source Love svg1](https://badges.frapsoft.com/os/v1/open-source.svg?v=103)](https://github.com/ellerbrock/open-source-badges/)"},{"location":"#pdic","text":"PDIC: (IDL) Transpiler Source-to-source compiler C/C++ to YAML Portable Data Interface Description Project related to PDI From C/C++ to Yaml Description Simple binary Python library static binary Python 3 ./pdic file.c import pdic; result:str = pdic.files_to_pdi()","title":"PDIC"},{"location":"#instalation","text":"Binary cmake -S . -DBINARY:BOOL = ON -B build && cmake --build build -- -j ` nproc ` Google Test cmake -S . -DTEST:BOOL = ON -B build && cmake --build build -- -j ` nproc ` cd build && ctest Python python setup.py build -G \"Unix Makefiles\" python3 setup.py bdist_wheel -G \"Unix Makefiles\" -j ` nproc ` python setup.py build_ext -G \"Unix Makefiles\" --inplace -j ` nproc ` pytest","title":"Instalation"},{"location":"#usage","text":"#pragma pdi on typedef struct Var8 { #pragma pdi type : int64 int my_int ; char char_tab [ 20 ]; char my_char ; } var ; #pragma pdi size:[42] int ** array_of_pointer_of_array [ 21 ]; var my_var ; #pragma pdi off Will be see and describe as follow structs: Var8: type: record name: Var8 alias: [var] fieldsize: 3 buffersize: 28 packed: false members: char_tab: { type: array, subtype: char, size: 20 } my_char: offset: 24 type: char my_int: type: int64 data: array_of_pointer_of_array: { type: array, subtype: { type: pointer, subtype: { type: array, subtype: int, size: 42 } }, size: 21 } my_var: type: record name: Var8 alias: [var] fieldsize: 3 buffersize: 28 packed: false members: char_tab: { type: array, subtype: char, size: 20 } my_char: offset: 24 type: char my_int: type: int64 Python Usage import os import pathlib import yaml import pdic here = pathlib . Path ( __file__ ) . parent . resolve () # pip show -f pdic if __name__ == \"__main__\" : pdi_yml_description : str = pdic . files_to_pdi ([ os . path . join ( here , \"level_1.c\" ), os . path . join ( here , \"level_2.c\" )]) print ( pdi_yml_description ) print ( yaml . dump ( yaml . load ( pdi_yml_description )))","title":"Usage"},{"location":"#index","text":"Abstract Usage Binary Python Developpement Code Documentation Test Deploy Links Autre Documentation Biblio Code example Extra Clang LLVM Mind Map Graph UML Contact / Credits Credits Barre Kevin neudinger (Software Scientist) CEA pdi team","title":"Index"},{"location":"1.0-Abstract/","text":"Abstract # Pronounce: PD I SEE Can you see the portable data iterface in this program ? Why clang ? Fast compiles and low memory use Expressive diagnostics (examples) GCC compatibility Modular library based architecture Support diverse clients (refactoring, static analysis, code generation, etc.) A real-world, production quality compiler A simple and hackable code base A single unified parser for C, Objective C, C++, and Objective C++ Conformance with C/C++/ObjC and their variants This project can see PDI Portable Data Interface representation in c/c++.","title":"Abstract"},{"location":"1.0-Abstract/#abstract","text":"Pronounce: PD I SEE Can you see the portable data iterface in this program ? Why clang ? Fast compiles and low memory use Expressive diagnostics (examples) GCC compatibility Modular library based architecture Support diverse clients (refactoring, static analysis, code generation, etc.) A real-world, production quality compiler A simple and hackable code base A single unified parser for C, Objective C, C++, and Objective C++ Conformance with C/C++/ObjC and their variants This project can see PDI Portable Data Interface representation in c/c++.","title":"Abstract"},{"location":"2.0-Requirement/","text":"Usages # Feature # Work on : C files C++ files Header .h .hh .hxx .hpp Code .c .cc .cxx .cpp Installation # Dependencies: cmake make","title":"Requirement"},{"location":"2.0-Requirement/#usages","text":"","title":"Usages"},{"location":"2.0-Requirement/#feature","text":"Work on : C files C++ files Header .h .hh .hxx .hpp Code .c .cc .cxx .cpp","title":"Feature"},{"location":"2.0-Requirement/#installation","text":"Dependencies: cmake make","title":"Installation"},{"location":"2.1-Binary/","text":"Binary # The Binary is static: LLVM embeded Clang embeded Libc embeded (build on ubuntu) Binary cmake -S . -DBINARY:BOOL = ON -B build && cmake --build build -- -j ` nproc ` Google Test cmake -S . -DTEST:BOOL = ON -B build && cmake --build build -- -j ` nproc ` cd build && ctest ./pdic ../PDI_test_parse.h -- ./pdic ../PDI_test_parse.h --stdout on -- # on/off ./pdic ../PDI_test_parse.h ../level_1.c --outputfilename out.yml -- -- is for Compilation databases for Clang-based tools Note that anything before the double dash \u201c--\u201d is an input to your LibTooling program, argv in main(), while anything after the double dash is an input to Clang itself (you won\u2019t concern yourself with those). (source LibTooling Example ) ./pdic ../examples/level_1.c -- pdic extract all information from AST and write PDI representation.","title":"Binary"},{"location":"2.1-Binary/#binary","text":"The Binary is static: LLVM embeded Clang embeded Libc embeded (build on ubuntu) Binary cmake -S . -DBINARY:BOOL = ON -B build && cmake --build build -- -j ` nproc ` Google Test cmake -S . -DTEST:BOOL = ON -B build && cmake --build build -- -j ` nproc ` cd build && ctest ./pdic ../PDI_test_parse.h -- ./pdic ../PDI_test_parse.h --stdout on -- # on/off ./pdic ../PDI_test_parse.h ../level_1.c --outputfilename out.yml -- -- is for Compilation databases for Clang-based tools Note that anything before the double dash \u201c--\u201d is an input to your LibTooling program, argv in main(), while anything after the double dash is an input to Clang itself (you won\u2019t concern yourself with those). (source LibTooling Example ) ./pdic ../examples/level_1.c -- pdic extract all information from AST and write PDI representation.","title":"Binary"},{"location":"2.2-Python/","text":"Python Api # Requirement: All dev requirements ( DevRequirement ) and: libncursesw5 Clang / LLVM (all dev tools) libomp5 libc++-dev libclang-dev ... Installation example (ubuntu) Source: https://apt.llvm.org sudo apt update sudo apt install libncursesw5 libpthread-stubs0-dev sudo apt install clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python-clang OR sudo bash -c \" $( wget -O - https://apt.llvm.org/llvm.sh ) \" # libclang-13-dev WARNING It may fail or somme dependency are not include (during pdic build or runtime) . Prefer the first command instead. Python Test # python3 setup.py build -G \"Unix Makefiles\" python3 setup.py bdist_wheel -G \"Unix Makefiles\" -j ` nproc ` python3 setup.py build_ext -G \"Unix Makefiles\" --inplace -j ` nproc ` pytest pydoc # pdoc3 pdic --http 0 .0.0.0:8888 # Or pdoc3 pdic --html","title":"Python"},{"location":"2.2-Python/#python-api","text":"Requirement: All dev requirements ( DevRequirement ) and: libncursesw5 Clang / LLVM (all dev tools) libomp5 libc++-dev libclang-dev ... Installation example (ubuntu) Source: https://apt.llvm.org sudo apt update sudo apt install libncursesw5 libpthread-stubs0-dev sudo apt install clang-format clang-tidy clang-tools clang clangd libc++-dev libc++1 libc++abi-dev libc++abi1 libclang-dev libclang1 liblldb-dev libllvm-ocaml-dev libomp-dev libomp5 lld lldb llvm-dev llvm-runtime llvm python-clang OR sudo bash -c \" $( wget -O - https://apt.llvm.org/llvm.sh ) \" # libclang-13-dev WARNING It may fail or somme dependency are not include (during pdic build or runtime) . Prefer the first command instead.","title":"Python Api"},{"location":"2.2-Python/#python-test","text":"python3 setup.py build -G \"Unix Makefiles\" python3 setup.py bdist_wheel -G \"Unix Makefiles\" -j ` nproc ` python3 setup.py build_ext -G \"Unix Makefiles\" --inplace -j ` nproc ` pytest","title":"Python Test"},{"location":"2.2-Python/#pydoc","text":"pdoc3 pdic --http 0 .0.0.0:8888 # Or pdoc3 pdic --html","title":"pydoc"},{"location":"3.0-Developpement/","text":"Developpement # Herre i present how to compile build and develop features. Requirement # lib pthread (-lpthread) lib math (-lm) lib dynamic loader (-ldl) zlib (-lz) cmake -S . -B build cmake --build build -- -j ` nproc ` cd build && ctest Examples # You can find differents examples -> Here","title":"Developpement"},{"location":"3.0-Developpement/#developpement","text":"Herre i present how to compile build and develop features.","title":"Developpement"},{"location":"3.0-Developpement/#requirement","text":"lib pthread (-lpthread) lib math (-lm) lib dynamic loader (-ldl) zlib (-lz) cmake -S . -B build cmake --build build -- -j ` nproc ` cd build && ctest","title":"Requirement"},{"location":"3.0-Developpement/#examples","text":"You can find differents examples -> Here","title":"Examples"},{"location":"4.0-Links/","text":"Usefull links # Clang API Clang / LLVM # Official documentation # Clang Plugins doc Clang Driver Design RecursiveASTVisitor Tutorial Other documentation # Basics of AST manipulation Comment parser Hacking on Clang is surprisingly easy understanding the clang ast Clang Tutorial: The AST Matcher Clang Tutorial: Finding Declarations Clang Tutorial Part: LibTooling Example # Part I Part II Part III libclang static # libclang-static-build Cmake standalone-static-libclang Pragma # Pragma token kind identifier Ex custom pragma 'TritonAssert' Padding and packing in C/C++ # https://fresh2refresh.com/c-programming/c-structure-padding/ Python Binding (pybind11) # https://pybind11.readthedocs.io/en/stable/cmake/index.html https://pybind11.readthedocs.io/en/stable/compiling.html#pybind11-add-module Builder # https://scikit-build.readthedocs.io/en/latest/index.html https://github.com/scikit-build/scikit-build-sample-projects https://github.com/scikit-build/scikit-ci https://github.com/scikit-build/scikit-ci/blob/master/docs/installation.rst https://blog.kitware.com/creating-static-executables-on-linux/ https://cliutils.gitlab.io/modern-cmake/ C/C++ Googletest & python3 unittest # https://google.github.io/googletest/ https://github.com/google/googletest/tree/master/googletest/samples https://python-packaging-user-guide.readthedocs.io/ https://docs.python.org/3/library/unittest.html https://gayerie.dev/docs/python/python3/unittest.html Doc # https://squidfunk.github.io/mkdocs-material/","title":"Links"},{"location":"4.0-Links/#usefull-links","text":"Clang API","title":"Usefull links"},{"location":"4.0-Links/#clang-llvm","text":"","title":"Clang / LLVM"},{"location":"4.0-Links/#official-documentation","text":"Clang Plugins doc Clang Driver Design RecursiveASTVisitor Tutorial","title":"Official documentation"},{"location":"4.0-Links/#other-documentation","text":"Basics of AST manipulation Comment parser Hacking on Clang is surprisingly easy understanding the clang ast Clang Tutorial: The AST Matcher Clang Tutorial: Finding Declarations","title":"Other documentation"},{"location":"4.0-Links/#clang-tutorial-part-libtooling-example","text":"Part I Part II Part III","title":"Clang Tutorial Part: LibTooling Example"},{"location":"4.0-Links/#libclang-static","text":"libclang-static-build Cmake standalone-static-libclang","title":"libclang static"},{"location":"4.0-Links/#pragma","text":"Pragma token kind identifier Ex custom pragma 'TritonAssert'","title":"Pragma"},{"location":"4.0-Links/#padding-and-packing-in-cc","text":"https://fresh2refresh.com/c-programming/c-structure-padding/","title":"Padding and packing in C/C++"},{"location":"4.0-Links/#python-binding-pybind11","text":"https://pybind11.readthedocs.io/en/stable/cmake/index.html https://pybind11.readthedocs.io/en/stable/compiling.html#pybind11-add-module","title":"Python Binding (pybind11)"},{"location":"4.0-Links/#builder","text":"https://scikit-build.readthedocs.io/en/latest/index.html https://github.com/scikit-build/scikit-build-sample-projects https://github.com/scikit-build/scikit-ci https://github.com/scikit-build/scikit-ci/blob/master/docs/installation.rst https://blog.kitware.com/creating-static-executables-on-linux/ https://cliutils.gitlab.io/modern-cmake/","title":"Builder"},{"location":"4.0-Links/#cc-googletest-python3-unittest","text":"https://google.github.io/googletest/ https://github.com/google/googletest/tree/master/googletest/samples https://python-packaging-user-guide.readthedocs.io/ https://docs.python.org/3/library/unittest.html https://gayerie.dev/docs/python/python3/unittest.html","title":"C/C++ Googletest &amp; python3 unittest"},{"location":"4.0-Links/#doc","text":"https://squidfunk.github.io/mkdocs-material/","title":"Doc"},{"location":"5.0-Extra/","text":"Extra # Install Clang llvm lld from source # Follow: LibTooling and LibASTMatchers installation tutorial if you want to contribute. Use gold or lld because bfd use too much ram wget or curl --progress-bar -LO wget https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-12.0.1.tar.gz tar xvf llvmorg-12.0.1.tar.gz cd llvm-project-llvmorg-12.0.1 cmake -G Ninja -S ./llvm -DLLVM_ENABLE_PROJECTS = \"clang;clang-tools-extra;lld\" -DCMAKE_BUILD_TYPE = Release -DLLVM_USE_LINKER = gold -B build # export CC=`which clang` # export CXX=`which clang++` # export CFLAGS='-fuse-ld=ld.lld -rtlib=compiler-rt' # export CXXFLAGS='-fuse-ld=lld' # gcc # export CXXFLAGS='-B lld' # clang # sudo update-alternatives --install \"/usr/bin/ld\" \"ld\" `which ld.lld` 10 cmake --build build -- -j ` nproc ` sudo cmake --install build cd build ninja install # uninstall from build xargs rm < install_manifest.txt","title":"Extra"},{"location":"5.0-Extra/#extra","text":"","title":"Extra"},{"location":"5.0-Extra/#install-clang-llvm-lld-from-source","text":"Follow: LibTooling and LibASTMatchers installation tutorial if you want to contribute. Use gold or lld because bfd use too much ram wget or curl --progress-bar -LO wget https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-12.0.1.tar.gz tar xvf llvmorg-12.0.1.tar.gz cd llvm-project-llvmorg-12.0.1 cmake -G Ninja -S ./llvm -DLLVM_ENABLE_PROJECTS = \"clang;clang-tools-extra;lld\" -DCMAKE_BUILD_TYPE = Release -DLLVM_USE_LINKER = gold -B build # export CC=`which clang` # export CXX=`which clang++` # export CFLAGS='-fuse-ld=ld.lld -rtlib=compiler-rt' # export CXXFLAGS='-fuse-ld=lld' # gcc # export CXXFLAGS='-B lld' # clang # sudo update-alternatives --install \"/usr/bin/ld\" \"ld\" `which ld.lld` 10 cmake --build build -- -j ` nproc ` sudo cmake --install build cd build ninja install # uninstall from build xargs rm < install_manifest.txt","title":"Install Clang llvm lld from source"},{"location":"5.1-Documentations/","text":"Documentation sevice # mkdocs serve docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material pdoc3 pdic","title":"Documentations"},{"location":"5.1-Documentations/#documentation-sevice","text":"mkdocs serve docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material pdoc3 pdic","title":"Documentation sevice"}]}